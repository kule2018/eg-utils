!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=1)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){}return t.init=function(){return new this},t.prototype.isString=function(t){return"String"===Object.prototype.toString.call(t).slice(8,-1)},t.prototype.isNumber=function(t){return"Number"===Object.prototype.toString.call(t).slice(8,-1)},t.prototype.isBoolean=function(t){return"Boolean"===Object.prototype.toString.call(t).slice(8,-1)},t.prototype.isFunction=function(t){return"Function"===Object.prototype.toString.call(t).slice(8,-1)},t.prototype.isNull=function(t){return"Null"===Object.prototype.toString.call(t).slice(8,-1)},t.prototype.isUndefined=function(t){return"Undefined"===Object.prototype.toString.call(t).slice(8,-1)},t.prototype.isObj=function(t){return"Object"===Object.prototype.toString.call(t).slice(8,-1)},t.prototype.isArray=function(t){return"Array"===Object.prototype.toString.call(t).slice(8,-1)},t.prototype.isDate=function(t){return"Date"===Object.prototype.toString.call(t).slice(8,-1)},t.prototype.isRegExp=function(t){return"RegExp"===Object.prototype.toString.call(t).slice(8,-1)},t.prototype.isError=function(t){return"Error"===Object.prototype.toString.call(t).slice(8,-1)},t.prototype.isSymbol=function(t){return"Symbol"===Object.prototype.toString.call(t).slice(8,-1)},t.prototype.isPromise=function(t){return"Promise"===Object.prototype.toString.call(t).slice(8,-1)},t.prototype.isSet=function(t){return"Set"===Object.prototype.toString.call(t).slice(8,-1)},t.prototype.isEmpty=function(t){return void 0===t||null==t||""==t},t.prototype.isIos=function(){return!!navigator.userAgent.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/)},t.prototype.isAndroid=function(){return navigator.userAgent.indexOf("Android")>-1||navigator.userAgent.indexOf("Linux")>-1},t.prototype.isPC=function(){for(var t=!0,e=navigator.userAgent,r=["Android","iPhone","SymbianOS","Windows Phone","iPad","iPod"],n=0;n<r.length;n++)if(e.indexOf(r[n])>0){t=!1;break}return t},t.prototype.isLeapYear=function(t){return t%400==0||t%4==0&&t%100!=0},t}();e.BaseMod=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(0),o=r(2),a=r(3),c=r(4),i=r(5),u=function(){function t(){}return t.prototype._extend=function(t,e){if("[object Object]"===Object.prototype.toString.call(t)&&"[object Object]"===Object.prototype.toString.call(e))for(var r in e)t[r]=t[r]&&"[object Object]"===t[r].toString()?this._extend(t[r],e[r]):t[r]=e[r];else"[object Array]"===Object.prototype.toString.call(t)&&"[object Array]"===Object.prototype.toString.call(e)&&(t=t.concat(e));return t},t.prototype.init=function(){for(var t={BaseMod:n.BaseMod,StringMod:o.StringMod,NumberMod:a.NumberMod,DateMod:c.DateMod,ArrayMod:i.ArrayMod},e={},r=0;r<t.length;r++)e=this._extend(e,t[r].BaseMod.init()),console.log("11111111111111",e);return e},t}();window.GTools=new u},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){}return t.prototype.trim=function(t,e){switch(e=e||1){case 1:return t.replace(/\s+/g,"");case 2:return t.replace(/(^\s*)|(\s*$)/g,"");case 3:return t.replace(/(^\s*)/g,"");case 4:return t.replace(/(\s*$)/g,"");default:return t}},t.prototype.replaceAll=function(t,e,r){return t.replace(new RegExp(e,"gm"),r)},t.prototype.replaceSubString=function(t){return t.str.substring(t.subStart,t.subEnd).replace(t.beforeStr,t.afterStr)},t.prototype.filterHtmlCode=function(t){var e={"<":"&lt;",">":"&gt","&":"&amp;","(":"&#40;",")":"&#41;"," ":"&nbsp;",'"':"&quot;","'":"&#39;"};return t.replace(/[<>&|() '"]/g,function(t){return e[t]})},t}();e.StringMod=n},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.getPlaceRandomNum=function(t,e){return"float"==e?Math.random()*t:Math.ceil(Math.random()*t)},e.prototype.getRangeRandomNum=function(t,e){return Math.floor(t+Math.random()*(e+1-t))},e.prototype.getFormatCurrency=function(t){return t.split("").reverse().join("").replace(/(\d{3}(?=\d)(?!\d+\.|$))/g,"$1,").split("").reverse().join("")},e.prototype.changeToChnCurrency=function(t){if("number"==typeof t&&(t=new String(t)),t=t.replace(/,/g,"").replace(/ /g,"").replace(/￥/g,""),isNaN(t))return"";for(var e=String(t).split("."),r="",n=e[0].length-1;n>=0;n--){if(e[0].length>10)return"";var o="",a=e[0].charAt(n);switch(a){case"0":o="零"+o;break;case"1":o="壹"+o;break;case"2":o="贰"+o;break;case"3":o="叁"+o;break;case"4":o="肆"+o;break;case"5":o="伍"+o;break;case"6":o="陆"+o;break;case"7":o="柒"+o;break;case"8":o="捌"+o;break;case"9":o="玖"+o}switch(e[0].length-n-1){case 0:o+="元";break;case 1:0!=a&&(o+="拾");break;case 2:0!=a&&(o+="佰");break;case 3:0!=a&&(o+="仟");break;case 4:o+="万";break;case 5:0!=a&&(o+="拾");break;case 6:0!=a&&(o+="佰");break;case 7:0!=a&&(o+="仟");break;case 8:o+="亿";break;case 9:o+="拾"}r=o+r}if(-1!=t.indexOf(".")){e[1].length>2&&(e[1]=e[1].substr(0,2));for(n=0;n<e[1].length;n++){o="";switch(e[1].charAt(n)){case"0":o="零"+o;break;case"1":o="壹"+o;break;case"2":o="贰"+o;break;case"3":o="叁"+o;break;case"4":o="肆"+o;break;case"5":o="伍"+o;break;case"6":o="陆"+o;break;case"7":o="柒"+o;break;case"8":o="捌"+o;break;case"9":o="玖"+o}0==n&&(o+="角"),1==n&&(o+="分"),r+=o}}for(;-1!=r.search("零零");)r=r.replace("零零","零").replace("零亿","亿").replace("亿万","亿").replace("零万","万").replace("零元","元").replace("零角","").replace("零分","");return"元"==r.charAt(r.length-1)&&(r+="整"),r},e}(r(0).BaseMod);e.NumberMod=a},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.formatDate=function(t,e){if(0===arguments.length)return null;10===(t+"").length&&(t=1e3*Number(t));var r,n=e||"yyyy-MM-dd hh:mm:ss",o={yyyy:(r="object"==typeof t?t:new Date(t)).getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),hh:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds()};return n.replace(/(yyyy|MM|dd|hh|mm|ss)+/g,function(t,e){var r=o[e];return t.length>0&&r<10&&(r="0"+r),r||0})},e.prototype.formatTime=function(t){return t>=3600?Math.floor(t/3600)+"小时"+Math.floor(t%3600/60)+"分"+t%60+"秒":t>=60?Math.floor(t/60)+"分"+t%60+"秒":t%60+"秒"},e.prototype.getDayMinus=function(t,e){return Math.floor((Number(new Date(e))-Number(new Date(t)))/864e5)},e.prototype.getYearDays=function(t){var e=365;return 29==this.getMonthDays(t+"-2")&&(e=366),e},e.prototype.getMonthDays=function(e){var r=new Date(e),n=r.getFullYear();return[31,null,31,30,31,30,31,31,30,31,30,31][r.getMonth()]||(t.prototype.isLeapYear.call(this,n)?29:28)},e.prototype.getWhichWeek=function(t){for(var e=new Date(t),r=e.getFullYear(),n=e.getMonth(),o=e.getDate(),a=new Date(r,0,1).getDay()||7,c=null,i=0;i<n;i++)o+=this.getMonthDays(r+"-"+i);return 1==a?c=Math.ceil(o/a):(o-=7-a+1,c=Math.ceil(o/7)+1),c},e}(r(0).BaseMod);e.DateMod=a},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){}return t.prototype.arrUnique=function(t){for(var e=[],r=0;r<t.length;r++)-1==e.indexOf(t[r])&&e.push(t[r]);return e},t.prototype.arrSort=function(t,e){return t.sort(function(r,n){switch(e){case 1:return n-r;case 2:return r-n;case 3:return Math.random()-.5;default:return t}})},t.prototype.arrRemove=function(t,e){var r=t.indexOf(e);return r>-1&&t.splice(r,1),t},t.prototype.arrUnion=function(t,e){return this.arrUnique(t.concat(e))},t.prototype.arrIntersect=function(t,e){return e.filter(function(e){return-1!==t.indexOf(e)})},t.prototype.arrMax=function(t){return Math.max.apply(null,t)},t.prototype.arrMin=function(t){return Math.min.apply(null,t)},t.prototype.arrSum=function(t){return t.reduce(function(t,e){return t+e})},t.prototype.arrAverage=function(t){return this.arrSum(t)/t.length},t.prototype.mergeJSON=function(t,e){var r={};if(t&&e){for(var n in e)t[n]=e[n];r=t}return r},t.prototype.deepCopy=function(t){return JSON.parse(JSON.stringify(t))},t}();e.ArrayMod=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZS9iYXNlLnRzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlL3N0cmluZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlL251bWJlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlL2RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZS9hcnJheS50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIk1vZHVsZXMiLCJpbml0IiwidGhpcyIsImlzU3RyaW5nIiwidG9TdHJpbmciLCJzbGljZSIsImlzTnVtYmVyIiwiaXNCb29sZWFuIiwiaXNGdW5jdGlvbiIsImlzTnVsbCIsImlzVW5kZWZpbmVkIiwiaXNPYmoiLCJpc0FycmF5IiwiaXNEYXRlIiwiaXNSZWdFeHAiLCJpc0Vycm9yIiwiaXNTeW1ib2wiLCJpc1Byb21pc2UiLCJpc1NldCIsImlzRW1wdHkiLCJpc0lvcyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIm1hdGNoIiwiaXNBbmRyb2lkIiwiaW5kZXhPZiIsImlzUEMiLCJmbGFnIiwidXNlckFnZW50SW5mbyIsIkFnZW50cyIsImxlbmd0aCIsImlzTGVhcFllYXIiLCJCYXNlTW9kIiwiYmFzZV8xIiwic3RyaW5nXzEiLCJudW1iZXJfMSIsImRhdGVfMSIsImFycmF5XzEiLCJDb3JlIiwiX2V4dGVuZCIsInRhcmdldCIsInNvdXJjZSIsImNvbmNhdCIsIlN0cmluZ01vZCIsIk51bWJlck1vZCIsIkRhdGVNb2QiLCJBcnJheU1vZCIsInJlcyIsImNvbnNvbGUiLCJsb2ciLCJ3aW5kb3ciLCJHVG9vbHMiLCJ0cmltIiwic3RyIiwidHlwZSIsInJlcGxhY2UiLCJyZXBsYWNlQWxsIiwiYmVmb3JlU3RyIiwiYWZ0ZXJTdHIiLCJSZWdFeHAiLCJyZXBsYWNlU3ViU3RyaW5nIiwib3B0aW9ucyIsInN1YnN0cmluZyIsInN1YlN0YXJ0Iiwic3ViRW5kIiwiZmlsdGVySHRtbENvZGUiLCJ0ZW1wIiwiPCIsIj4iLCImIiwiKCIsIikiLCIgIiwiXCIiLCInIiwiY2hyIiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsImIiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwiX18iLCJjb25zdHJ1Y3RvciIsIl9zdXBlciIsImFwcGx5IiwiYXJndW1lbnRzIiwiZ2V0UGxhY2VSYW5kb21OdW0iLCJwbGFjZVJhbmdlIiwicmV0dXJuVHlwZSIsIk1hdGgiLCJyYW5kb20iLCJjZWlsIiwiZ2V0UmFuZ2VSYW5kb21OdW0iLCJtaW4iLCJtYXgiLCJmbG9vciIsImdldEZvcm1hdEN1cnJlbmN5Iiwic3BsaXQiLCJyZXZlcnNlIiwiam9pbiIsImNoYW5nZVRvQ2huQ3VycmVuY3kiLCJTdHJpbmciLCJpc05hTiIsInBhcnQiLCJuZXdjaGFyIiwidGVtcGNoYXIiLCJvbGRjaGFyIiwiY2hhckF0Iiwic3Vic3RyIiwic2VhcmNoIiwiZm9ybWF0RGF0ZSIsImRhdGUiLCJOdW1iZXIiLCJ0ZW1wZGF0ZSIsImZvcm1hdCIsImZvcm1hdE9iaiIsInl5eXkiLCJEYXRlIiwiZ2V0RnVsbFllYXIiLCJNTSIsImdldE1vbnRoIiwiZGQiLCJnZXREYXRlIiwiaGgiLCJnZXRIb3VycyIsIm1tIiwiZ2V0TWludXRlcyIsInNzIiwiZ2V0U2Vjb25kcyIsInJlc3VsdCIsImZvcm1hdFRpbWUiLCJ0aW1lIiwiZ2V0RGF5TWludXMiLCJzdGFydERhdGUiLCJlbmREYXRlIiwiZ2V0WWVhckRheXMiLCJ5ZWFyIiwiZGF5cyIsImdldE1vbnRoRGF5cyIsImdldFdoaWNoV2VlayIsIm1vbnRoIiwieWVhckZpcnN0RGF5IiwiZ2V0RGF5Iiwid2VlayIsImFyclVuaXF1ZSIsImFyciIsInB1c2giLCJhcnJTb3J0Iiwic29ydCIsImEiLCJhcnJSZW1vdmUiLCJlbGUiLCJzcGxpY2UiLCJhcnJVbmlvbiIsImFyckludGVyc2VjdCIsImZpbHRlciIsInYiLCJhcnJNYXgiLCJhcnJNaW4iLCJhcnJTdW0iLCJyZWR1Y2UiLCJwcmUiLCJjdXIiLCJhcnJBdmVyYWdlIiwibWVyZ2VKU09OIiwiZGVlcENvcHkiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxFQUFBLENBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxZQUFBLENBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIsRUFBQXFCLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtBQUFFLEdBQUEsaUJBQUFGLFFBQUFHLFdBQUEsT0FBQUgsRUFDQSxJQUFBSSxFQUFBWCxPQUFBWSxPQUFBLE1BR0EsR0FGQTFCLEVBQUFrQixFQUFBTyxHQUNBWCxPQUFBQyxlQUFBVSxFQUFBLFdBQXlDVCxZQUFBLEVBQUFLLFVBQ3pDLEVBQUFFLEdBQUEsaUJBQUFGLEVBQUEsUUFBQU0sS0FBQU4sRUFBQXJCLEVBQUFVLEVBQUFlLEVBQUFFLEVBQUEsU0FBQUEsR0FBZ0gsT0FBQU4sRUFBQU0sSUFBcUJDLEtBQUEsS0FBQUQsSUFDckksT0FBQUYsR0FJQXpCLEVBQUE2QixFQUFBLFNBQUExQixHQUNBLElBQUFTLEVBQUFULEtBQUFxQixXQUNBLFdBQTJCLE9BQUFyQixFQUFBLFNBQzNCLFdBQWlDLE9BQUFBLEdBRWpDLE9BREFILEVBQUFVLEVBQUFFLEVBQUEsSUFBQUEsR0FDQUEsR0FJQVosRUFBQWEsRUFBQSxTQUFBaUIsRUFBQUMsR0FBc0QsT0FBQWpCLE9BQUFrQixVQUFBQyxlQUFBMUIsS0FBQXVCLEVBQUFDLElBR3REL0IsRUFBQWtDLEVBQUEsR0FJQWxDLElBQUFtQyxFQUFBLGtDQ2pGQXJCLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUFlLEVBQUEsV0FDQSxTQUFBQSxLQXNLQSxPQXBLQUEsRUFBQUMsS0FBQSxXQUNBLFdBQUFDLE1BT0FGLEVBQUFKLFVBQUFPLFNBQUEsU0FBQWxCLEdBQ0EsaUJBQUFQLE9BQUFrQixVQUFBUSxTQUFBakMsS0FBQWMsR0FBQW9CLE1BQUEsT0FPQUwsRUFBQUosVUFBQVUsU0FBQSxTQUFBckIsR0FDQSxpQkFBQVAsT0FBQWtCLFVBQUFRLFNBQUFqQyxLQUFBYyxHQUFBb0IsTUFBQSxPQU9BTCxFQUFBSixVQUFBVyxVQUFBLFNBQUF0QixHQUNBLGtCQUFBUCxPQUFBa0IsVUFBQVEsU0FBQWpDLEtBQUFjLEdBQUFvQixNQUFBLE9BT0FMLEVBQUFKLFVBQUFZLFdBQUEsU0FBQXZCLEdBQ0EsbUJBQUFQLE9BQUFrQixVQUFBUSxTQUFBakMsS0FBQWMsR0FBQW9CLE1BQUEsT0FPQUwsRUFBQUosVUFBQWEsT0FBQSxTQUFBeEIsR0FDQSxlQUFBUCxPQUFBa0IsVUFBQVEsU0FBQWpDLEtBQUFjLEdBQUFvQixNQUFBLE9BT0FMLEVBQUFKLFVBQUFjLFlBQUEsU0FBQXpCLEdBQ0Esb0JBQUFQLE9BQUFrQixVQUFBUSxTQUFBakMsS0FBQWMsR0FBQW9CLE1BQUEsT0FPQUwsRUFBQUosVUFBQWUsTUFBQSxTQUFBMUIsR0FDQSxpQkFBQVAsT0FBQWtCLFVBQUFRLFNBQUFqQyxLQUFBYyxHQUFBb0IsTUFBQSxPQU9BTCxFQUFBSixVQUFBZ0IsUUFBQSxTQUFBM0IsR0FDQSxnQkFBQVAsT0FBQWtCLFVBQUFRLFNBQUFqQyxLQUFBYyxHQUFBb0IsTUFBQSxPQU9BTCxFQUFBSixVQUFBaUIsT0FBQSxTQUFBNUIsR0FDQSxlQUFBUCxPQUFBa0IsVUFBQVEsU0FBQWpDLEtBQUFjLEdBQUFvQixNQUFBLE9BT0FMLEVBQUFKLFVBQUFrQixTQUFBLFNBQUE3QixHQUNBLGlCQUFBUCxPQUFBa0IsVUFBQVEsU0FBQWpDLEtBQUFjLEdBQUFvQixNQUFBLE9BT0FMLEVBQUFKLFVBQUFtQixRQUFBLFNBQUE5QixHQUNBLGdCQUFBUCxPQUFBa0IsVUFBQVEsU0FBQWpDLEtBQUFjLEdBQUFvQixNQUFBLE9BT0FMLEVBQUFKLFVBQUFvQixTQUFBLFNBQUEvQixHQUNBLGlCQUFBUCxPQUFBa0IsVUFBQVEsU0FBQWpDLEtBQUFjLEdBQUFvQixNQUFBLE9BT0FMLEVBQUFKLFVBQUFxQixVQUFBLFNBQUFoQyxHQUNBLGtCQUFBUCxPQUFBa0IsVUFBQVEsU0FBQWpDLEtBQUFjLEdBQUFvQixNQUFBLE9BT0FMLEVBQUFKLFVBQUFzQixNQUFBLFNBQUFqQyxHQUNBLGNBQUFQLE9BQUFrQixVQUFBUSxTQUFBakMsS0FBQWMsR0FBQW9CLE1BQUEsT0FPQUwsRUFBQUosVUFBQXVCLFFBQUEsU0FBQWxDLEdBQ0EsZ0JBQUFBLEdBQUEsTUFBQUEsR0FBQSxJQUFBQSxHQU1BZSxFQUFBSixVQUFBd0IsTUFBQSxXQUNBLFFBQUFDLFVBQUFDLFVBQUFDLE1BQUEsa0NBTUF2QixFQUFBSixVQUFBNEIsVUFBQSxXQUNBLE9BQUFILFVBQUFDLFVBQUFHLFFBQUEsZUFBQUosVUFBQUMsVUFBQUcsUUFBQSxhQU1BekIsRUFBQUosVUFBQThCLEtBQUEsV0FPQSxJQU5BLElBQUFDLEdBQUEsRUFDQUMsRUFBQVAsVUFBQUMsVUFDQU8sRUFBQSxvQkFDQSw0QkFDQSxlQUVBN0QsRUFBQSxFQUF1QkEsRUFBQTZELEVBQUFDLE9BQW1COUQsSUFDMUMsR0FBQTRELEVBQUFILFFBQUFJLEVBQUE3RCxJQUFBLEdBQ0EyRCxHQUFBLEVBQ0EsTUFHQSxPQUFBQSxHQU9BM0IsRUFBQUosVUFBQW1DLFdBQUEsU0FBQTlDLEdBQ0EsT0FBQUEsRUFBQSxRQUFBQSxFQUFBLE1BQUFBLEVBQUEsUUFFQWUsRUF2S0EsR0F5S0FsQyxFQUFBa0UsUUFBQWhDLGdDQzFLQXRCLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUFnRCxFQUFhckUsRUFBUSxHQUNyQnNFLEVBQWV0RSxFQUFRLEdBQ3ZCdUUsRUFBZXZFLEVBQVEsR0FDdkJ3RSxFQUFheEUsRUFBUSxHQUNyQnlFLEVBQWN6RSxFQUFRLEdBQ3RCMEUsRUFBQSxXQUNBLFNBQUFBLEtBNkJBLE9BM0JBQSxFQUFBMUMsVUFBQTJDLFFBQUEsU0FBQUMsRUFBQUMsR0FDQSx1QkFBQS9ELE9BQUFrQixVQUFBUSxTQUFBakMsS0FBQXFFLElBQUEsb0JBQUE5RCxPQUFBa0IsVUFBQVEsU0FBQWpDLEtBQUFzRSxHQUNBLFFBQUFsRCxLQUFBa0QsRUFDQUQsRUFBQWpELEdBQUFpRCxFQUFBakQsSUFBQSxvQkFBQWlELEVBQUFqRCxHQUFBYSxXQUNBRixLQUFBcUMsUUFBQUMsRUFBQWpELEdBQUFrRCxFQUFBbEQsSUFBQWlELEVBQUFqRCxHQUFBa0QsRUFBQWxELE9BR0EsbUJBQUFiLE9BQUFrQixVQUFBUSxTQUFBakMsS0FBQXFFLElBQUEsbUJBQUE5RCxPQUFBa0IsVUFBQVEsU0FBQWpDLEtBQUFzRSxLQUNBRCxJQUFBRSxPQUFBRCxJQUVBLE9BQUFELEdBRUFGLEVBQUExQyxVQUFBSyxLQUFBLFdBU0EsSUFSQSxJQUFBL0IsRUFBQSxDQUNBOEQsUUFBQUMsRUFBQUQsUUFDQVcsVUFBQVQsRUFBQVMsVUFDQUMsVUFBQVQsRUFBQVMsVUFDQUMsUUFBQVQsRUFBQVMsUUFDQUMsU0FBQVQsRUFBQVMsVUFFQUMsRUFBQSxHQUNBM0UsRUFBQSxFQUF1QkEsRUFBQUYsRUFBQTRELE9BQW9CMUQsSUFDM0MyRSxFQUFBN0MsS0FBQXFDLFFBQUFRLEVBQUE3RSxFQUFBRSxHQUFBNEQsUUFBQS9CLFFBQ0ErQyxRQUFBQyxJQUFBLGlCQUFBRixHQUVBLE9BQUFBLEdBRUFULEVBOUJBLEdBZ0NBWSxPQUFBQyxPQUFBLElBQUFiLGdDQ3RDQTVELE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUFmLEVBQUEsV0FDQSxTQUFBQSxLQWtFQSxPQTFEQUEsRUFBQTBCLFVBQUF3RCxLQUFBLFNBQUFDLEVBQUFDLEdBRUEsT0FEQUEsS0FBQSxHQUVBLE9BQ0EsT0FBQUQsRUFBQUUsUUFBQSxXQUNBLE9BQ0EsT0FBQUYsRUFBQUUsUUFBQSxxQkFDQSxPQUNBLE9BQUFGLEVBQUFFLFFBQUEsY0FDQSxPQUNBLE9BQUFGLEVBQUFFLFFBQUEsY0FDQSxRQUNBLE9BQUFGLElBVUFuRixFQUFBMEIsVUFBQTRELFdBQUEsU0FBQUgsRUFBQUksRUFBQUMsR0FDQSxPQUFBTCxFQUFBRSxRQUFBLElBQUFJLE9BQUFGLEVBQUEsTUFBQUMsSUFXQXhGLEVBQUEwQixVQUFBZ0UsaUJBQUEsU0FBQUMsR0FFQSxPQURBQSxFQUFBUixJQUFBUyxVQUFBRCxFQUFBRSxTQUFBRixFQUFBRyxRQUNBVCxRQUFBTSxFQUFBSixVQUFBSSxFQUFBSCxXQU9BeEYsRUFBQTBCLFVBQUFxRSxlQUFBLFNBQUFaLEdBQ0EsSUFBQWEsRUFBQSxDQUNBQyxJQUFBLE9BQ0FDLElBQUEsTUFDQUMsSUFBQSxRQUNBQyxJQUFBLFFBQ0FDLElBQUEsUUFDQUMsSUFBQSxTQUNBQyxJQUFBLFNBQ0FDLElBQUEsU0FFQSxPQUFBckIsRUFBQUUsUUFBQSx3QkFBQW9CLEdBQ0EsT0FBQVQsRUFBQVMsTUFHQXpHLEVBbkVBLEdBcUVBSixFQUFBNkUsVUFBQXpFLGdDQ3RFQSxJQUNBMEcsRUFEQUMsRUFBQTNFLFdBQUEyRSxZQUNBRCxFQUFBLFNBQUF0RyxFQUFBd0csR0FJQSxPQUhBRixFQUFBbEcsT0FBQXFHLGdCQUNBLENBQWNDLFVBQUEsY0FBZ0JDLE9BQUEsU0FBQTNHLEVBQUF3RyxHQUFzQ3hHLEVBQUEwRyxVQUFBRixJQUNwRSxTQUFBeEcsRUFBQXdHLEdBQTZCLFFBQUFoRixLQUFBZ0YsSUFBQWpGLGVBQUFDLEtBQUF4QixFQUFBd0IsR0FBQWdGLEVBQUFoRixNQUM3QnhCLEVBQUF3RyxJQUVBLFNBQUF4RyxFQUFBd0csR0FFQSxTQUFBSSxJQUF1QmhGLEtBQUFpRixZQUFBN0csRUFEdkJzRyxFQUFBdEcsRUFBQXdHLEdBRUF4RyxFQUFBc0IsVUFBQSxPQUFBa0YsRUFBQXBHLE9BQUFZLE9BQUF3RixJQUFBSSxFQUFBdEYsVUFBQWtGLEVBQUFsRixVQUFBLElBQUFzRixLQUdBeEcsT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUMsSUFDQWYsRUFBQSxTQUFBa0gsR0FFQSxTQUFBbEgsSUFDQSxjQUFBa0gsS0FBQUMsTUFBQW5GLEtBQUFvRixZQUFBcEYsS0F3TEEsT0ExTEEyRSxFQUFBM0csRUFBQWtILEdBVUFsSCxFQUFBMEIsVUFBQTJGLGtCQUFBLFNBQUFDLEVBQUFDLEdBQ0EsZUFBQUEsRUFBQUMsS0FBQUMsU0FBQUgsRUFBQUUsS0FBQUUsS0FBQUYsS0FBQUMsU0FBQUgsSUFRQXRILEVBQUEwQixVQUFBaUcsa0JBQUEsU0FBQUMsRUFBQUMsR0FDQSxPQUFBTCxLQUFBTSxNQUFBRixFQUFBSixLQUFBQyxVQUFBSSxFQUFBLEVBQUFELEtBT0E1SCxFQUFBMEIsVUFBQXFHLGtCQUFBLFNBQUFoSCxHQUNBLE9BQUFBLEVBQUFpSCxNQUFBLElBQUFDLFVBQUFDLEtBQUEsSUFBQTdDLFFBQUEsNEJBQWlFLE9BQUEyQyxNQUFBLElBQUFDLFVBQUFDLEtBQUEsS0FPakVsSSxFQUFBMEIsVUFBQXlHLG9CQUFBLFNBQUFwSCxHQVFBLEdBUEEsaUJBQUFBLElBQ0FBLEVBQUEsSUFBQXFILE9BQUFySCxJQUlBQSxJQUFBc0UsUUFBQSxTQUFBQSxRQUFBLFNBQUFBLFFBQUEsU0FFQWdELE1BQUF0SCxHQUNBLFNBT0EsSUFIQSxJQUFBdUgsRUFBQUYsT0FBQXJILEdBQUFpSCxNQUFBLEtBQ0FPLEVBQUEsR0FFQXpJLEVBQUF3SSxFQUFBLEdBQUExRSxPQUFBLEVBQXdDOUQsR0FBQSxFQUFRQSxJQUFBLENBQ2hELEdBQUF3SSxFQUFBLEdBQUExRSxPQUFBLEdBQ0EsU0FFQSxJQUFBNEUsRUFBQSxHQUNBQyxFQUFBSCxFQUFBLEdBQUFJLE9BQUE1SSxHQUNBLE9BQUEySSxHQUNBLFFBQ0FELEVBQUEsSUFBQUEsRUFDQSxNQUNBLFFBQ0FBLEVBQUEsSUFBQUEsRUFDQSxNQUNBLFFBQ0FBLEVBQUEsSUFBQUEsRUFDQSxNQUNBLFFBQ0FBLEVBQUEsSUFBQUEsRUFDQSxNQUNBLFFBQ0FBLEVBQUEsSUFBQUEsRUFDQSxNQUNBLFFBQ0FBLEVBQUEsSUFBQUEsRUFDQSxNQUNBLFFBQ0FBLEVBQUEsSUFBQUEsRUFDQSxNQUNBLFFBQ0FBLEVBQUEsSUFBQUEsRUFDQSxNQUNBLFFBQ0FBLEVBQUEsSUFBQUEsRUFDQSxNQUNBLFFBQ0FBLEVBQUEsSUFBQUEsRUFHQSxPQUFBRixFQUFBLEdBQUExRSxPQUFBOUQsRUFBQSxHQUNBLE9BQ0EwSSxHQUFBLElBQ0EsTUFDQSxPQUNBLEdBQUFDLElBQ0FELEdBQUEsS0FDQSxNQUNBLE9BQ0EsR0FBQUMsSUFDQUQsR0FBQSxLQUNBLE1BQ0EsT0FDQSxHQUFBQyxJQUNBRCxHQUFBLEtBQ0EsTUFDQSxPQUNBQSxHQUFBLElBQ0EsTUFDQSxPQUNBLEdBQUFDLElBQ0FELEdBQUEsS0FDQSxNQUNBLE9BQ0EsR0FBQUMsSUFDQUQsR0FBQSxLQUNBLE1BQ0EsT0FDQSxHQUFBQyxJQUNBRCxHQUFBLEtBQ0EsTUFDQSxPQUNBQSxHQUFBLElBQ0EsTUFDQSxPQUNBQSxHQUFBLElBR0FELEVBQUFDLEVBQUFELEVBR0EsT0FBQXhILEVBQUF3QyxRQUFBLE1BQ0ErRSxFQUFBLEdBQUExRSxPQUFBLElBRUEwRSxFQUFBLEdBQUFBLEVBQUEsR0FBQUssT0FBQSxNQUVBLElBQUE3SSxFQUFBLEVBQTJCQSxFQUFBd0ksRUFBQSxHQUFBMUUsT0FBb0I5RCxJQUFBLENBQy9DMEksRUFBQSxHQUVBLE9BREFGLEVBQUEsR0FBQUksT0FBQTVJLElBRUEsUUFDQTBJLEVBQUEsSUFBQUEsRUFDQSxNQUNBLFFBQ0FBLEVBQUEsSUFBQUEsRUFDQSxNQUNBLFFBQ0FBLEVBQUEsSUFBQUEsRUFDQSxNQUNBLFFBQ0FBLEVBQUEsSUFBQUEsRUFDQSxNQUNBLFFBQ0FBLEVBQUEsSUFBQUEsRUFDQSxNQUNBLFFBQ0FBLEVBQUEsSUFBQUEsRUFDQSxNQUNBLFFBQ0FBLEVBQUEsSUFBQUEsRUFDQSxNQUNBLFFBQ0FBLEVBQUEsSUFBQUEsRUFDQSxNQUNBLFFBQ0FBLEVBQUEsSUFBQUEsRUFDQSxNQUNBLFFBQ0FBLEVBQUEsSUFBQUEsRUFHQSxHQUFBMUksSUFDQTBJLEdBQUEsS0FDQSxHQUFBMUksSUFDQTBJLEdBQUEsS0FDQUQsR0FBQUMsR0FJQSxTQUFBRCxFQUFBSyxPQUFBLE9BQ0FMLElBQUFsRCxRQUFBLFVBQUFBLFFBQUEsVUFBQUEsUUFBQSxVQUFBQSxRQUFBLFVBQUFBLFFBQUEsVUFBQUEsUUFBQSxTQUFBQSxRQUFBLFNBS0EsTUFIQSxLQUFBa0QsRUFBQUcsT0FBQUgsRUFBQTNFLE9BQUEsS0FDQTJFLEdBQUEsS0FFQUEsR0FFQXZJLEVBM0xBLENBRGFOLEVBQVEsR0E2THBCb0UsU0FDRGxFLEVBQUE4RSxVQUFBMUUsZ0NDNU1BLElBQ0EwRyxFQURBQyxFQUFBM0UsV0FBQTJFLFlBQ0FELEVBQUEsU0FBQXRHLEVBQUF3RyxHQUlBLE9BSEFGLEVBQUFsRyxPQUFBcUcsZ0JBQ0EsQ0FBY0MsVUFBQSxjQUFnQkMsT0FBQSxTQUFBM0csRUFBQXdHLEdBQXNDeEcsRUFBQTBHLFVBQUFGLElBQ3BFLFNBQUF4RyxFQUFBd0csR0FBNkIsUUFBQWhGLEtBQUFnRixJQUFBakYsZUFBQUMsS0FBQXhCLEVBQUF3QixHQUFBZ0YsRUFBQWhGLE1BQzdCeEIsRUFBQXdHLElBRUEsU0FBQXhHLEVBQUF3RyxHQUVBLFNBQUFJLElBQXVCaEYsS0FBQWlGLFlBQUE3RyxFQUR2QnNHLEVBQUF0RyxFQUFBd0csR0FFQXhHLEVBQUFzQixVQUFBLE9BQUFrRixFQUFBcEcsT0FBQVksT0FBQXdGLElBQUFJLEVBQUF0RixVQUFBa0YsRUFBQWxGLFVBQUEsSUFBQXNGLEtBR0F4RyxPQUFBQyxlQUFBYixFQUFBLGNBQThDbUIsT0FBQSxJQUM5QyxJQUNBZixFQUFBLFNBQUFrSCxHQUVBLFNBQUFsSCxJQUNBLGNBQUFrSCxLQUFBQyxNQUFBbkYsS0FBQW9GLFlBQUFwRixLQTBHQSxPQTVHQTJFLEVBQUEzRyxFQUFBa0gsR0FVQWxILEVBQUEwQixVQUFBbUgsV0FBQSxTQUFBQyxFQUFBMUQsR0FDQSxPQUFBZ0MsVUFBQXhELE9BQ0EsWUFDQSxNQUFBa0YsRUFBQSxJQUFBbEYsU0FDQWtGLEVBQUEsSUFBQUMsT0FBQUQsSUFFQSxJQUFBRSxFQUFBQyxFQUFBN0QsR0FBQSxzQkFPQThELEVBQUEsQ0FDQUMsTUFOQUgsRUFEQSxpQkFBQUYsRUFDQUEsRUFHQSxJQUFBTSxLQUFBTixJQUdBTyxjQUNBQyxHQUFBTixFQUFBTyxXQUFBLEVBQ0FDLEdBQUFSLEVBQUFTLFVBQ0FDLEdBQUFWLEVBQUFXLFdBQ0FDLEdBQUFaLEVBQUFhLGFBQ0FDLEdBQUFkLEVBQUFlLGNBRUEsT0FBQWQsRUFBQTVELFFBQUEsbUNBQUEyRSxFQUFBM0ksR0FDQSxJQUFBTixFQUFBbUksRUFBQTdILEdBSUEsT0FIQTJJLEVBQUFwRyxPQUFBLEdBQUE3QyxFQUFBLEtBQ0FBLEVBQUEsSUFBQUEsR0FFQUEsR0FBQSxLQVFBZixFQUFBMEIsVUFBQXVJLFdBQUEsU0FBQUMsR0FXQSxPQVRBQSxHQUFBLEtBQ0ExQyxLQUFBTSxNQUFBb0MsRUFBQSxXQUFBMUMsS0FBQU0sTUFBQW9DLEVBQUEsYUFBQUEsRUFBQSxPQUVBQSxHQUFBLEdBQ0ExQyxLQUFBTSxNQUFBb0MsRUFBQSxRQUFBQSxFQUFBLE9BR0FBLEVBQUEsUUFVQWxLLEVBQUEwQixVQUFBeUksWUFBQSxTQUFBQyxFQUFBQyxHQUNBLE9BQUE3QyxLQUFBTSxPQUFBaUIsT0FBQSxJQUFBSyxLQUFBaUIsSUFBQXRCLE9BQUEsSUFBQUssS0FBQWdCLEtBQUEsUUFPQXBLLEVBQUEwQixVQUFBNEksWUFBQSxTQUFBQyxHQUNBLElBQUFDLEVBQUEsSUFFQSxPQURBLElBQUF4SSxLQUFBeUksYUFBQUYsRUFBQSxRQUFBQyxFQUFBLEtBQ0FBLEdBT0F4SyxFQUFBMEIsVUFBQStJLGFBQUEsU0FBQTNCLEdBQ0EsSUFBQTlDLEVBQUEsSUFBQW9ELEtBQUFOLEdBQ0F5QixFQUFBdkUsRUFBQXFELGNBRUEsOENBREFyRCxFQUFBdUQsY0FDQXJDLEVBQUF4RixVQUFBbUMsV0FBQTVELEtBQUErQixLQUFBdUksR0FBQSxRQU9BdkssRUFBQTBCLFVBQUFnSixhQUFBLFNBQUE1QixHQUlBLElBSEEsSUFBQTlDLEVBQUEsSUFBQW9ELEtBQUFOLEdBQUF5QixFQUFBdkUsRUFBQXFELGNBQUFzQixFQUFBM0UsRUFBQXVELFdBQUFpQixFQUFBeEUsRUFBQXlELFVBQ0FtQixFQUFBLElBQUF4QixLQUFBbUIsRUFBQSxLQUFBTSxVQUFBLEVBQ0FDLEVBQUEsS0FDQTVLLEVBQUEsRUFBdUJBLEVBQUF5SyxFQUFXekssSUFDbENzSyxHQUFBeEksS0FBQXlJLGFBQUFGLEVBQUEsSUFBQXJLLEdBU0EsT0FQQSxHQUFBMEssRUFDQUUsRUFBQXRELEtBQUFFLEtBQUE4QyxFQUFBSSxJQUdBSixHQUFBLEVBQUFJLEVBQUEsRUFDQUUsRUFBQXRELEtBQUFFLEtBQUE4QyxFQUFBLE1BRUFNLEdBRUE5SyxFQTdHQSxDQURhTixFQUFRLEdBK0dwQm9FLFNBQ0RsRSxFQUFBK0UsUUFBQTNFLGdDQzlIQVEsT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUMsSUFBQWYsRUFBQSxXQUNBLFNBQUFBLEtBNkhBLE9BdEhBQSxFQUFBMEIsVUFBQXFKLFVBQUEsU0FBQUMsR0FFQSxJQURBLElBQUFoRixFQUFBLEdBQ0FsRyxFQUFBLEVBQXVCQSxFQUFBa0wsRUFBQXBILE9BQWdCOUQsS0FDdkMsR0FBQWtHLEVBQUF6QyxRQUFBeUgsRUFBQWxMLEtBQ0FrRyxFQUFBaUYsS0FBQUQsRUFBQWxMLElBR0EsT0FBQWtHLEdBUUFoRyxFQUFBMEIsVUFBQXdKLFFBQUEsU0FBQUYsRUFBQTVGLEdBQ0EsT0FBQTRGLEVBQUFHLEtBQUEsU0FBQUMsRUFBQXhFLEdBQ0EsT0FBQXhCLEdBQ0EsT0FDQSxPQUFBd0IsRUFBQXdFLEVBQ0EsT0FDQSxPQUFBQSxFQUFBeEUsRUFDQSxPQUNBLE9BQUFZLEtBQUFDLFNBQUEsR0FDQSxRQUNBLE9BQUF1RCxNQVVBaEwsRUFBQTBCLFVBQUEySixVQUFBLFNBQUFMLEVBQUFNLEdBQ0EsSUFBQXhMLEVBQUFrTCxFQUFBekgsUUFBQStILEdBRUEsT0FEQXhMLEdBQUEsR0FBQWtMLEVBQUFPLE9BQUF6TCxFQUFBLEdBQ0FrTCxHQVFBaEwsRUFBQTBCLFVBQUE4SixTQUFBLFNBQUFKLEVBQUF4RSxHQUNBLE9BQUE1RSxLQUFBK0ksVUFBQUssRUFBQTVHLE9BQUFvQyxLQVFBNUcsRUFBQTBCLFVBQUErSixhQUFBLFNBQUFMLEVBQUF4RSxHQUNBLE9BQUFBLEVBQUE4RSxPQUFBLFNBQUFDLEdBQ0EsV0FBQVAsRUFBQTdILFFBQUFvSSxNQVFBM0wsRUFBQTBCLFVBQUFrSyxPQUFBLFNBQUFaLEdBQ0EsT0FBQXhELEtBQUFLLElBQUFWLE1BQUEsS0FBQTZELElBT0FoTCxFQUFBMEIsVUFBQW1LLE9BQUEsU0FBQWIsR0FDQSxPQUFBeEQsS0FBQUksSUFBQVQsTUFBQSxLQUFBNkQsSUFPQWhMLEVBQUEwQixVQUFBb0ssT0FBQSxTQUFBZCxHQUNBLE9BQUFBLEVBQUFlLE9BQUEsU0FBQUMsRUFBQUMsR0FDQSxPQUFBRCxFQUFBQyxLQVFBak0sRUFBQTBCLFVBQUF3SyxXQUFBLFNBQUFsQixHQUNBLE9BQUFoSixLQUFBOEosT0FBQWQsS0FBQXBILFFBUUE1RCxFQUFBMEIsVUFBQXlLLFVBQUEsU0FBQWYsRUFBQXhFLEdBQ0EsSUFBQVosRUFBQSxHQUNBLEdBQUFvRixHQUFBeEUsRUFBQSxDQUNBLFFBQUE5RyxLQUFBOEcsRUFDQXdFLEVBQUF0TCxHQUFBOEcsRUFBQTlHLEdBRUFrRyxFQUFBb0YsRUFFQSxPQUFBcEYsR0FPQWhHLEVBQUEwQixVQUFBMEssU0FBQSxTQUFBN0wsR0FDQSxPQUFBOEwsS0FBQUMsTUFBQUQsS0FBQUUsVUFBQWhNLEtBRUFQLEVBOUhBLEdBZ0lBSixFQUFBZ0YsU0FBQTVFIiwiZmlsZSI6IkdUb29scy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBNb2R1bGVzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1vZHVsZXMoKSB7XG4gICAgfVxuICAgIE1vZHVsZXMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIOWIpOaWreWtl+espuS4suexu+Wei1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBNb2R1bGVzLnByb3RvdHlwZS5pc1N0cmluZyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkgPT09ICdTdHJpbmcnO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIOWIpOaWreWtl+espuS4suexu+Wei1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBNb2R1bGVzLnByb3RvdHlwZS5pc051bWJlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkgPT09ICdOdW1iZXInO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIOWIpOaWrXN0cmluZ+exu+Wei1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBNb2R1bGVzLnByb3RvdHlwZS5pc0Jvb2xlYW4gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpID09PSAnQm9vbGVhbic7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g5Yik5patRnVuY3Rpb27nsbvlnotcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgTW9kdWxlcy5wcm90b3R5cGUuaXNGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkgPT09ICdGdW5jdGlvbic7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g5Yik5patbnVsbOexu+Wei1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBNb2R1bGVzLnByb3RvdHlwZS5pc051bGwgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpID09PSAnTnVsbCc7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g5Yik5patdW5kZWZpbmVk57G75Z6LXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIE1vZHVsZXMucHJvdG90eXBlLmlzVW5kZWZpbmVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSA9PT0gJ1VuZGVmaW5lZCc7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g5Yik5patb2JqZWN057G75Z6LXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIE1vZHVsZXMucHJvdG90eXBlLmlzT2JqID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSA9PT0gJ09iamVjdCc7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g5Yik5patYXJyYXnnsbvlnotcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgTW9kdWxlcy5wcm90b3R5cGUuaXNBcnJheSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkgPT09ICdBcnJheSc7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g5Yik5patZGF0Zeexu+Wei1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBNb2R1bGVzLnByb3RvdHlwZS5pc0RhdGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpID09PSAnRGF0ZSc7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g5Yik5patcmVnRXhw57G75Z6LXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIE1vZHVsZXMucHJvdG90eXBlLmlzUmVnRXhwID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSA9PT0gJ1JlZ0V4cCc7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g5Yik5patZXJyb3LnsbvlnotcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgTW9kdWxlcy5wcm90b3R5cGUuaXNFcnJvciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkgPT09ICdFcnJvcic7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g5Yik5patc3ltYm9s57G75Z6LXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIE1vZHVsZXMucHJvdG90eXBlLmlzU3ltYm9sID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSA9PT0gJ1N5bWJvbCc7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g5Yik5patcHJvbWlzZeexu+Wei1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBNb2R1bGVzLnByb3RvdHlwZS5pc1Byb21pc2UgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpID09PSAnUHJvbWlzZSc7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g5Yik5patc2V057G75Z6LXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIE1vZHVsZXMucHJvdG90eXBlLmlzU2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSA9PT0gJ1NldCc7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g5Yik5pat5piv5ZCm5Li656m6XG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIE1vZHVsZXMucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSBcInVuZGVmaW5lZFwiIHx8IHZhbHVlID09IG51bGwgfHwgdmFsdWUgPT0gXCJcIiA/IHRydWUgOiBmYWxzZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiDliKTmlq3mmK/lkKbkuLppb3NcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBNb2R1bGVzLnByb3RvdHlwZS5pc0lvcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICEhbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvXFwoaVteO10rOyggVTspPyBDUFUuK01hYyBPUyBYLyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g5Yik5pat5piv5ZCm5Li6YW5kcm9pZFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIE1vZHVsZXMucHJvdG90eXBlLmlzQW5kcm9pZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQW5kcm9pZCcpID4gLTEgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdMaW51eCcpID4gLTE7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g5Yik5pat5piv5ZCm5Li6cGPnq69cbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBNb2R1bGVzLnByb3RvdHlwZS5pc1BDID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZmxhZyA9IHRydWU7XG4gICAgICAgIHZhciB1c2VyQWdlbnRJbmZvID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICAgICAgdmFyIEFnZW50cyA9IFtcIkFuZHJvaWRcIiwgXCJpUGhvbmVcIixcbiAgICAgICAgICAgIFwiU3ltYmlhbk9TXCIsIFwiV2luZG93cyBQaG9uZVwiLFxuICAgICAgICAgICAgXCJpUGFkXCIsIFwiaVBvZFwiXG4gICAgICAgIF07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgQWdlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodXNlckFnZW50SW5mby5pbmRleE9mKEFnZW50c1tpXSkgPiAwKSB7XG4gICAgICAgICAgICAgICAgZmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbGFnO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIOWIpOaWreaYr+WQpuS4uumXsOW5tFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBNb2R1bGVzLnByb3RvdHlwZS5pc0xlYXBZZWFyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAodmFsdWUgJSA0MDAgPT0gMCkgfHwgKHZhbHVlICUgNCA9PSAwICYmIHZhbHVlICUgMTAwICE9IDApO1xuICAgIH07XG4gICAgcmV0dXJuIE1vZHVsZXM7XG59KCkpO1xuZXhwb3J0cy5CYXNlTW9kID0gTW9kdWxlcztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGJhc2VfMSA9IHJlcXVpcmUoXCIuL21vZHVsZS9iYXNlXCIpO1xudmFyIHN0cmluZ18xID0gcmVxdWlyZShcIi4vbW9kdWxlL3N0cmluZ1wiKTtcbnZhciBudW1iZXJfMSA9IHJlcXVpcmUoXCIuL21vZHVsZS9udW1iZXJcIik7XG52YXIgZGF0ZV8xID0gcmVxdWlyZShcIi4vbW9kdWxlL2RhdGVcIik7XG52YXIgYXJyYXlfMSA9IHJlcXVpcmUoXCIuL21vZHVsZS9hcnJheVwiKTtcbnZhciBDb3JlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvcmUoKSB7XG4gICAgfVxuICAgIENvcmUucHJvdG90eXBlLl9leHRlbmQgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0YXJnZXQpID09PSAnW29iamVjdCBPYmplY3RdJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc291cmNlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHRhcmdldFtrZXldICYmIHRhcmdldFtrZXldLnRvU3RyaW5nKCkgPT09IFwiW29iamVjdCBPYmplY3RdXCIgP1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9leHRlbmQodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldKSA6IHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRhcmdldCkgPT09ICdbb2JqZWN0IEFycmF5XScgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHNvdXJjZSkgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5jb25jYXQoc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH07XG4gICAgQ29yZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1vZHVsZXMgPSB7XG4gICAgICAgICAgICAnQmFzZU1vZCc6IGJhc2VfMS5CYXNlTW9kLFxuICAgICAgICAgICAgJ1N0cmluZ01vZCc6IHN0cmluZ18xLlN0cmluZ01vZCxcbiAgICAgICAgICAgICdOdW1iZXJNb2QnOiBudW1iZXJfMS5OdW1iZXJNb2QsXG4gICAgICAgICAgICAnRGF0ZU1vZCc6IGRhdGVfMS5EYXRlTW9kLFxuICAgICAgICAgICAgJ0FycmF5TW9kJzogYXJyYXlfMS5BcnJheU1vZCxcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlcyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBtID0gMDsgbSA8IG1vZHVsZXMubGVuZ3RoOyBtKyspIHtcbiAgICAgICAgICAgIHJlcyA9IHRoaXMuX2V4dGVuZChyZXMsIG1vZHVsZXNbbV0uQmFzZU1vZC5pbml0KCkpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCIxMTExMTExMTExMTExMVwiLCByZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfTtcbiAgICByZXR1cm4gQ29yZTtcbn0oKSk7XG53aW5kb3cuR1Rvb2xzID0gbmV3IENvcmUoKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIG1vZHVsZXMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gbW9kdWxlcygpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIOWOu+Wtl+espuS4suepuuagvFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIg5a2X56ym5LiyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHR5cGUgMS3miYDmnInnqbrmoLwgIDIt5YmN5ZCO56m65qC8ICAzLeWJjeepuuagvCA0LeWQjuepuuagvFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgbW9kdWxlcy5wcm90b3R5cGUudHJpbSA9IGZ1bmN0aW9uIChzdHIsIHR5cGUpIHtcbiAgICAgICAgdHlwZSA9IHR5cGUgfHwgMTtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXHMrL2csIFwiXCIpO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvKF5cXHMqKXwoXFxzKiQpL2csIFwiXCIpO1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvKF5cXHMqKS9nLCBcIlwiKTtcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyhcXHMqJCkvZywgXCJcIik7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiDmm7/mjaLlrZfnrKbkuLLkuK3miYDmnInmjIflrprlrZfnrKZcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIOWGheWuuVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBiZWZvcmVTdHIg6ZyA6KaB5pu/5o2i5a2X56ymXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFmdGVyU3RyIOabv+aNouaIkOeahOWtl+esplxuICAgICAqIEByZXR1cm5zIHsoc3RyaW5nKX1cbiAgICAgKi9cbiAgICBtb2R1bGVzLnByb3RvdHlwZS5yZXBsYWNlQWxsID0gZnVuY3Rpb24gKHN0ciwgYmVmb3JlU3RyLCBhZnRlclN0cikge1xuICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UobmV3IFJlZ0V4cChiZWZvcmVTdHIsICdnbScpLCBhZnRlclN0cik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g5pu/5o2i6KKr5oiq5Y+W5a2X56ym5LiyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciDlhoXlrrlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3ViU3RhcnQg5oiq5Y+W5byA5aeL5L2N572uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN1YkVuZCDmiKrlj5bnu5PmnZ/kvY3nva5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYmVmb3JlU3RyIOmcgOimgeabv+aNouWtl+esplxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhZnRlclN0ciDmm7/mjaLmiJDnmoTlrZfnrKZcbiAgICAgKiBAcmV0dXJucyB7KHN0cmluZyl9XG4gICAgICovXG4gICAgbW9kdWxlcy5wcm90b3R5cGUucmVwbGFjZVN1YlN0cmluZyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHZhciB0ZW1wID0gb3B0aW9ucy5zdHIuc3Vic3RyaW5nKG9wdGlvbnMuc3ViU3RhcnQsIG9wdGlvbnMuc3ViRW5kKTtcbiAgICAgICAgcmV0dXJuIHRlbXAucmVwbGFjZShvcHRpb25zLmJlZm9yZVN0ciwgb3B0aW9ucy5hZnRlclN0cik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g6L+H5rukaHRtbOaTjeS9nOesplxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgbW9kdWxlcy5wcm90b3R5cGUuZmlsdGVySHRtbENvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHZhciB0ZW1wID0ge1xuICAgICAgICAgICAgJzwnOiAnJmx0OycsXG4gICAgICAgICAgICAnPic6ICcmZ3QnLFxuICAgICAgICAgICAgJyYnOiAnJmFtcDsnLFxuICAgICAgICAgICAgJygnOiAnJiM0MDsnLFxuICAgICAgICAgICAgJyknOiAnJiM0MTsnLFxuICAgICAgICAgICAgJyAnOiAnJm5ic3A7JyxcbiAgICAgICAgICAgICdcIic6ICcmcXVvdDsnLFxuICAgICAgICAgICAgJ1xcJyc6IFwiJiMzOTtcIlxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1s8PiZ8KCkgJ1wiXS9nLCBmdW5jdGlvbiAoY2hyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGVtcFtjaHJdO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBtb2R1bGVzO1xufSgpKTtcbmV4cG9ydHMuU3RyaW5nTW9kID0gbW9kdWxlcztcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYmFzZV8xID0gcmVxdWlyZShcIi4vYmFzZVwiKTtcbnZhciBtb2R1bGVzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhtb2R1bGVzLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIG1vZHVsZXMoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIOeUn+aIkOaMh+WumuS9jeaVsOeahOmaj+acuuaVsFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwbGFjZVJhbmdlIOS9jeaVsFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZXR1cm5UeXBlXG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBtb2R1bGVzLnByb3RvdHlwZS5nZXRQbGFjZVJhbmRvbU51bSA9IGZ1bmN0aW9uIChwbGFjZVJhbmdlLCByZXR1cm5UeXBlKSB7XG4gICAgICAgIHJldHVybiByZXR1cm5UeXBlID09IFwiZmxvYXRcIiA/IE1hdGgucmFuZG9tKCkgKiBwbGFjZVJhbmdlIDogTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiBwbGFjZVJhbmdlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiDnlJ/miJDmjIflrprojIPlm7TnmoTpmo/mnLrmlbBcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWluIOacgOWwj+WAvFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXgg5pyA5aSn5YC8XG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBtb2R1bGVzLnByb3RvdHlwZS5nZXRSYW5nZVJhbmRvbU51bSA9IGZ1bmN0aW9uIChtaW4sIG1heCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihtaW4gKyBNYXRoLnJhbmRvbSgpICogKChtYXggKyAxKSAtIG1pbikpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIOagvOW8j+WMluaIkOi0p+W4geagvOW8j1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgbW9kdWxlcy5wcm90b3R5cGUuZ2V0Rm9ybWF0Q3VycmVuY3kgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnNwbGl0KCcnKS5yZXZlcnNlKCkuam9pbignJykucmVwbGFjZSgvKFxcZHszfSg/PVxcZCkoPyFcXGQrXFwufCQpKS9nLCAnJDEsJykuc3BsaXQoJycpLnJldmVyc2UoKS5qb2luKCcnKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiDovazmjaLmiJDlpKflhpnotKfluIHmoLzlvI9cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIOi0p+W4gemHkeminVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgbW9kdWxlcy5wcm90b3R5cGUuY2hhbmdlVG9DaG5DdXJyZW5jeSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG5ldyBTdHJpbmcodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIDtcbiAgICAgICAgLy/ov4fmu6TkvKDlhaXlgLznmoTml6DnlKjlrZfnrKZcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC8sL2csIFwiXCIpLnJlcGxhY2UoLyAvZywgXCJcIikucmVwbGFjZSgv77+lL2csIFwiXCIpO1xuICAgICAgICAvL+mqjOivgei+k+WFpeeahOWtl+espuaYr+WQpuS4uuaVsOWtl1xuICAgICAgICBpZiAoaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICA7XG4gICAgICAgIC8v5a2X56ym5aSE55CG5a6M5q+V5ZCO5byA5aeL6L2s5o2iXG4gICAgICAgIHZhciBwYXJ0ID0gU3RyaW5nKHZhbHVlKS5zcGxpdChcIi5cIik7XG4gICAgICAgIHZhciBuZXdjaGFyID0gXCJcIjtcbiAgICAgICAgLy/lsI/mlbDngrnliY3ov5vooYzovazljJZcbiAgICAgICAgZm9yICh2YXIgaSA9IHBhcnRbMF0ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmIChwYXJ0WzBdLmxlbmd0aCA+IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdGVtcGNoYXIgPSBcIlwiO1xuICAgICAgICAgICAgdmFyIG9sZGNoYXIgPSBwYXJ0WzBdLmNoYXJBdChpKTtcbiAgICAgICAgICAgIHN3aXRjaCAob2xkY2hhcikge1xuICAgICAgICAgICAgICAgIGNhc2UgXCIwXCI6XG4gICAgICAgICAgICAgICAgICAgIHRlbXBjaGFyID0gXCLpm7ZcIiArIHRlbXBjaGFyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiMVwiOlxuICAgICAgICAgICAgICAgICAgICB0ZW1wY2hhciA9IFwi5aO5XCIgKyB0ZW1wY2hhcjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIjJcIjpcbiAgICAgICAgICAgICAgICAgICAgdGVtcGNoYXIgPSBcIui0sFwiICsgdGVtcGNoYXI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCIzXCI6XG4gICAgICAgICAgICAgICAgICAgIHRlbXBjaGFyID0gXCLlj4FcIiArIHRlbXBjaGFyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiNFwiOlxuICAgICAgICAgICAgICAgICAgICB0ZW1wY2hhciA9IFwi6IKGXCIgKyB0ZW1wY2hhcjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIjVcIjpcbiAgICAgICAgICAgICAgICAgICAgdGVtcGNoYXIgPSBcIuS8jVwiICsgdGVtcGNoYXI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCI2XCI6XG4gICAgICAgICAgICAgICAgICAgIHRlbXBjaGFyID0gXCLpmYZcIiArIHRlbXBjaGFyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiN1wiOlxuICAgICAgICAgICAgICAgICAgICB0ZW1wY2hhciA9IFwi5p+SXCIgKyB0ZW1wY2hhcjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIjhcIjpcbiAgICAgICAgICAgICAgICAgICAgdGVtcGNoYXIgPSBcIuaNjFwiICsgdGVtcGNoYXI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCI5XCI6XG4gICAgICAgICAgICAgICAgICAgIHRlbXBjaGFyID0gXCLnjpZcIiArIHRlbXBjaGFyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAocGFydFswXS5sZW5ndGggLSBpIC0gMSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgdGVtcGNoYXIgPSB0ZW1wY2hhciArIFwi5YWDXCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZGNoYXIgIT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBjaGFyID0gdGVtcGNoYXIgKyBcIuaLvlwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRjaGFyICE9IDApXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wY2hhciA9IHRlbXBjaGFyICsgXCLkvbBcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAob2xkY2hhciAhPSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGNoYXIgPSB0ZW1wY2hhciArIFwi5LufXCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgdGVtcGNoYXIgPSB0ZW1wY2hhciArIFwi5LiHXCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZGNoYXIgIT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBjaGFyID0gdGVtcGNoYXIgKyBcIuaLvlwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRjaGFyICE9IDApXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wY2hhciA9IHRlbXBjaGFyICsgXCLkvbBcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBpZiAob2xkY2hhciAhPSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGNoYXIgPSB0ZW1wY2hhciArIFwi5LufXCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgdGVtcGNoYXIgPSB0ZW1wY2hhciArIFwi5Lq/XCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgdGVtcGNoYXIgPSB0ZW1wY2hhciArIFwi5ou+XCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3Y2hhciA9IHRlbXBjaGFyICsgbmV3Y2hhcjtcbiAgICAgICAgfVxuICAgICAgICAvL+Wwj+aVsOeCueS5i+WQjui/m+ihjOi9rOWMllxuICAgICAgICBpZiAodmFsdWUuaW5kZXhPZihcIi5cIikgIT0gLTEpIHtcbiAgICAgICAgICAgIGlmIChwYXJ0WzFdLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgICAgICAvL+S/neeVmeS4pOS9jeWwj+aVsFxuICAgICAgICAgICAgICAgIHBhcnRbMV0gPSBwYXJ0WzFdLnN1YnN0cigwLCAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydFsxXS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciB0ZW1wY2hhciA9IFwiXCI7XG4gICAgICAgICAgICAgICAgdmFyIHBlcmNoYXIgPSBwYXJ0WzFdLmNoYXJBdChpKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHBlcmNoYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIjBcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBjaGFyID0gXCLpm7ZcIiArIHRlbXBjaGFyO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCIxXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wY2hhciA9IFwi5aO5XCIgKyB0ZW1wY2hhcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiMlwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGNoYXIgPSBcIui0sFwiICsgdGVtcGNoYXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIjNcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBjaGFyID0gXCLlj4FcIiArIHRlbXBjaGFyO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCI0XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wY2hhciA9IFwi6IKGXCIgKyB0ZW1wY2hhcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiNVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGNoYXIgPSBcIuS8jVwiICsgdGVtcGNoYXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIjZcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBjaGFyID0gXCLpmYZcIiArIHRlbXBjaGFyO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCI3XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wY2hhciA9IFwi5p+SXCIgKyB0ZW1wY2hhcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiOFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGNoYXIgPSBcIuaNjFwiICsgdGVtcGNoYXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIjlcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBjaGFyID0gXCLnjpZcIiArIHRlbXBjaGFyO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpID09IDApXG4gICAgICAgICAgICAgICAgICAgIHRlbXBjaGFyID0gdGVtcGNoYXIgKyBcIuinklwiO1xuICAgICAgICAgICAgICAgIGlmIChpID09IDEpXG4gICAgICAgICAgICAgICAgICAgIHRlbXBjaGFyID0gdGVtcGNoYXIgKyBcIuWIhlwiO1xuICAgICAgICAgICAgICAgIG5ld2NoYXIgPSBuZXdjaGFyICsgdGVtcGNoYXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy/mm7/mjaLmiYDmnInml6DnlKjmsYnlrZdcbiAgICAgICAgd2hpbGUgKG5ld2NoYXIuc2VhcmNoKFwi6Zu26Zu2XCIpICE9IC0xKSB7XG4gICAgICAgICAgICBuZXdjaGFyID0gbmV3Y2hhci5yZXBsYWNlKFwi6Zu26Zu2XCIsIFwi6Zu2XCIpLnJlcGxhY2UoXCLpm7bkur9cIiwgXCLkur9cIikucmVwbGFjZShcIuS6v+S4h1wiLCBcIuS6v1wiKS5yZXBsYWNlKFwi6Zu25LiHXCIsIFwi5LiHXCIpLnJlcGxhY2UoXCLpm7blhYNcIiwgXCLlhYNcIikucmVwbGFjZShcIumbtuinklwiLCBcIlwiKS5yZXBsYWNlKFwi6Zu25YiGXCIsIFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXdjaGFyLmNoYXJBdChuZXdjaGFyLmxlbmd0aCAtIDEpID09IFwi5YWDXCIpIHtcbiAgICAgICAgICAgIG5ld2NoYXIgPSBuZXdjaGFyICsgXCLmlbRcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3Y2hhcjtcbiAgICB9O1xuICAgIHJldHVybiBtb2R1bGVzO1xufShiYXNlXzEuQmFzZU1vZCkpO1xuZXhwb3J0cy5OdW1iZXJNb2QgPSBtb2R1bGVzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBiYXNlXzEgPSByZXF1aXJlKFwiLi9iYXNlXCIpO1xudmFyIG1vZHVsZXMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKG1vZHVsZXMsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gbW9kdWxlcygpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g5qC85byP5YyW5pel5pyfXG4gICAgICogQHBhcmFtIHthbnl9IGRhdGUg5pe26Ze05oiz5oiW5pel5pyfXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUg6buY6K6k77yaeXl5eS1NTS1kZCBoaDptbTpzc1xuICAgICAqIEByZXR1cm5zIHthbnl9XG4gICAgICovXG4gICAgbW9kdWxlcy5wcm90b3R5cGUuZm9ybWF0RGF0ZSA9IGZ1bmN0aW9uIChkYXRlLCB0eXBlKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICgoZGF0ZSArICcnKS5sZW5ndGggPT09IDEwKSB7XG4gICAgICAgICAgICBkYXRlID0gTnVtYmVyKGRhdGUpICogMTAwMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZm9ybWF0ID0gdHlwZSB8fCAneXl5eS1NTS1kZCBoaDptbTpzcycsIHRlbXBkYXRlO1xuICAgICAgICBpZiAodHlwZW9mIGRhdGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB0ZW1wZGF0ZSA9IGRhdGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0ZW1wZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmb3JtYXRPYmogPSB7XG4gICAgICAgICAgICB5eXl5OiB0ZW1wZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgTU06IHRlbXBkYXRlLmdldE1vbnRoKCkgKyAxLFxuICAgICAgICAgICAgZGQ6IHRlbXBkYXRlLmdldERhdGUoKSxcbiAgICAgICAgICAgIGhoOiB0ZW1wZGF0ZS5nZXRIb3VycygpLFxuICAgICAgICAgICAgbW06IHRlbXBkYXRlLmdldE1pbnV0ZXMoKSxcbiAgICAgICAgICAgIHNzOiB0ZW1wZGF0ZS5nZXRTZWNvbmRzKClcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGZvcm1hdC5yZXBsYWNlKC8oeXl5eXxNTXxkZHxoaHxtbXxzcykrL2csIGZ1bmN0aW9uIChyZXN1bHQsIGtleSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gZm9ybWF0T2JqW2tleV07XG4gICAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDAgJiYgdmFsdWUgPCAxMCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gJzAnICsgdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgfHwgMDtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g5qC85byP5YyW5pe25YiG56eSXG4gICAgICogQHBhcmFtIHthbnl9IGRhdGUg5pe26Ze05oizXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBtb2R1bGVzLnByb3RvdHlwZS5mb3JtYXRUaW1lID0gZnVuY3Rpb24gKHRpbWUpIHtcbiAgICAgICAgdmFyIHRlbXAgPSAnJztcbiAgICAgICAgaWYgKHRpbWUgPj0gMzYwMCkge1xuICAgICAgICAgICAgdGVtcCA9IE1hdGguZmxvb3IodGltZSAvIDM2MDApICsgJ+Wwj+aXticgKyBNYXRoLmZsb29yKHRpbWUgJSAzNjAwIC8gNjApICsgJ+WIhicgKyB0aW1lICUgNjAgKyAn56eSJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aW1lID49IDYwKSB7XG4gICAgICAgICAgICB0ZW1wID0gTWF0aC5mbG9vcih0aW1lIC8gNjApICsgJ+WIhicgKyB0aW1lICUgNjAgKyAn56eSJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRlbXAgPSB0aW1lICUgNjAgKyAn56eSJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGVtcDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiDojrflj5bkuKTkuKrml6XmnJ/pl7Tlt67lgLxcbiAgICAgKiBAcGFyYW0geyp9IHN0YXJ0RGF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gZW5kRGF0ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgbW9kdWxlcy5wcm90b3R5cGUuZ2V0RGF5TWludXMgPSBmdW5jdGlvbiAoc3RhcnREYXRlLCBlbmREYXRlKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKChOdW1iZXIobmV3IERhdGUoZW5kRGF0ZSkpIC0gTnVtYmVyKG5ldyBEYXRlKHN0YXJ0RGF0ZSkpKSAvICgxMDAwICogNjAgKiA2MCAqIDI0KSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g6I635Y+W5p+Q5bm05pyJ5aSa5bCR5aSpXG4gICAgICogQHBhcmFtIHsqfSB5ZWFyIDE5OTlcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqL1xuICAgIG1vZHVsZXMucHJvdG90eXBlLmdldFllYXJEYXlzID0gZnVuY3Rpb24gKHllYXIpIHtcbiAgICAgICAgdmFyIGRheXMgPSAzNjU7XG4gICAgICAgIHRoaXMuZ2V0TW9udGhEYXlzKHllYXIgKyAnLTInKSA9PSAyOSA/IGRheXMgPSAzNjYgOiBkYXlzO1xuICAgICAgICByZXR1cm4gZGF5cztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiDojrflj5bmn5DlubTmn5DmnIjmnInlpJrlsJHlpKlcbiAgICAgKiBAcGFyYW0geyp9IGRhdGUgMTk5OS0xXG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBtb2R1bGVzLnByb3RvdHlwZS5nZXRNb250aERheXMgPSBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICB2YXIgdGVtcCA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgICB2YXIgeWVhciA9IHRlbXAuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgdmFyIG1vbnRoID0gdGVtcC5nZXRNb250aCgpO1xuICAgICAgICByZXR1cm4gWzMxLCBudWxsLCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV1bbW9udGhdIHx8IChfc3VwZXIucHJvdG90eXBlLmlzTGVhcFllYXIuY2FsbCh0aGlzLCB5ZWFyKSA/IDI5IDogMjgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIOiOt+WPluafkOW5tOafkOWkqeaYr+esrOWHoOWRqFxuICAgICAqIEBwYXJhbSB7Kn0gZGF0ZSAxOTk5LTEtMVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgbW9kdWxlcy5wcm90b3R5cGUuZ2V0V2hpY2hXZWVrID0gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgdmFyIHRlbXAgPSBuZXcgRGF0ZShkYXRlKSwgeWVhciA9IHRlbXAuZ2V0RnVsbFllYXIoKSwgbW9udGggPSB0ZW1wLmdldE1vbnRoKCksIGRheXMgPSB0ZW1wLmdldERhdGUoKTtcbiAgICAgICAgdmFyIHllYXJGaXJzdERheSA9IG5ldyBEYXRlKHllYXIsIDAsIDEpLmdldERheSgpIHx8IDc7XG4gICAgICAgIHZhciB3ZWVrID0gbnVsbDtcbiAgICAgICAgZm9yICh2YXIgbSA9IDA7IG0gPCBtb250aDsgbSsrKSB7XG4gICAgICAgICAgICBkYXlzICs9IHRoaXMuZ2V0TW9udGhEYXlzKHllYXIgKyAnLScgKyBtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeWVhckZpcnN0RGF5ID09IDEpIHtcbiAgICAgICAgICAgIHdlZWsgPSBNYXRoLmNlaWwoZGF5cyAvIHllYXJGaXJzdERheSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkYXlzIC09ICg3IC0geWVhckZpcnN0RGF5ICsgMSk7XG4gICAgICAgICAgICB3ZWVrID0gTWF0aC5jZWlsKGRheXMgLyA3KSArIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdlZWs7XG4gICAgfTtcbiAgICByZXR1cm4gbW9kdWxlcztcbn0oYmFzZV8xLkJhc2VNb2QpKTtcbmV4cG9ydHMuRGF0ZU1vZCA9IG1vZHVsZXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBtb2R1bGVzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIG1vZHVsZXMoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24g5pWw57uE5YWD57Sg5Y676YeNXG4gICAgICAgICAqIEBwYXJhbSB7QXJyYXkgPCBhbnkgPn0gYXJyXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheSA8IGFueSA+fVxuICAgICAgICAgKi9cbiAgICBtb2R1bGVzLnByb3RvdHlwZS5hcnJVbmlxdWUgPSBmdW5jdGlvbiAoYXJyKSB7XG4gICAgICAgIHZhciB0ZW1wID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGVtcC5pbmRleE9mKGFycltpXSkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0ZW1wLnB1c2goYXJyW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGVtcDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiDmlbDnu4TlhYPntKDmjpLluo9cbiAgICAgKiBAcGFyYW0geyp9IGFyciDmlbDnu4RcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdHlwZSAxLemZjeW6jyAgMi3ljYfluo8gIDMt6ZqP5py6XG4gICAgICogQHJldHVybnMge0FycmF5IDwgYW55ID59XG4gICAgICovXG4gICAgbW9kdWxlcy5wcm90b3R5cGUuYXJyU29ydCA9IGZ1bmN0aW9uIChhcnIsIHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGFyci5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiIC0gYTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpIC0gMC41O1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIOWIoOmZpOaMh+WumueahOaVsOe7hOWFg+e0oFxuICAgICAqIEBwYXJhbSB7QXJyYXkgPCBhbnkgPn0gYXJyXG4gICAgICogQHBhcmFtIHsqfSBlbGVcbiAgICAgKiBAcmV0dXJucyB7QXJyYXkgPCBhbnkgPn1cbiAgICAgKi9cbiAgICBtb2R1bGVzLnByb3RvdHlwZS5hcnJSZW1vdmUgPSBmdW5jdGlvbiAoYXJyLCBlbGUpIHtcbiAgICAgICAgdmFyIGkgPSBhcnIuaW5kZXhPZihlbGUpO1xuICAgICAgICBpID4gLTEgPyBhcnIuc3BsaWNlKGksIDEpIDogbnVsbDtcbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiDojrflvpfkuKTkuKrmlbDnu4TnmoTlubbpm4ZcbiAgICAgKiBAcGFyYW0ge0FycmF5IDwgYW55ID59IGFcbiAgICAgKiBAcGFyYW0ge0FycmF5IDwgYW55ID59IGJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXkgPCBhbnkgPn1cbiAgICAgKi9cbiAgICBtb2R1bGVzLnByb3RvdHlwZS5hcnJVbmlvbiA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFyclVuaXF1ZShhLmNvbmNhdChiKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g6I635b6X5Lik5Liq5pWw57uE55qE5Lqk6ZuGXG4gICAgICogQHBhcmFtIHtBcnJheSA8IGFueSA+fSBhXG4gICAgICogQHBhcmFtIHtBcnJheSA8IGFueSA+fSBiXG4gICAgICogQHJldHVybnMge0FycmF5IDwgYW55ID59XG4gICAgICovXG4gICAgbW9kdWxlcy5wcm90b3R5cGUuYXJySW50ZXJzZWN0ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGIuZmlsdGVyKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICByZXR1cm4gYS5pbmRleE9mKHYpICE9PSAtMTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g5pWw57uE5YWD57Sg5pyA5aSn5YC877yIbnVtYmVy77yJXG4gICAgICogQHBhcmFtIHtBcnJheSA8IG51bWJlciA+fSBhcnJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqL1xuICAgIG1vZHVsZXMucHJvdG90eXBlLmFyck1heCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGFycik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g5pWw57uE5YWD57Sg5pyA5bCP5YC877yIbnVtYmVy77yJXG4gICAgICogQHBhcmFtIHtBcnJheSA8IG51bWJlciA+fSBhcnJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqL1xuICAgIG1vZHVsZXMucHJvdG90eXBlLmFyck1pbiA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWluLmFwcGx5KG51bGwsIGFycik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24g5pWw57uE5YWD57Sg5rGC5ZKM77yIbnVtYmVy77yJXG4gICAgICogQHBhcmFtIHtBcnJheSA8IG51bWJlciA+fSBhcnJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqL1xuICAgIG1vZHVsZXMucHJvdG90eXBlLmFyclN1bSA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgICAgICAgcmV0dXJuIGFyci5yZWR1Y2UoZnVuY3Rpb24gKHByZSwgY3VyKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJlICsgY3VyO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiDmlbDnu4TlhYPntKDlubPlnYflgLzvvIhudW1iZXLvvIlcbiAgICAgKiBAcGFyYW0ge0FycmF5IDwgbnVtYmVyID59IGFyclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgbW9kdWxlcy5wcm90b3R5cGUuYXJyQXZlcmFnZSA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXJyU3VtKGFycikgLyBhcnIubGVuZ3RoO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIOWQiOW5tuS4pOS4quWvueixoVxuICAgICAqIEBwYXJhbSB7Kn0gYSDlr7nosaFcbiAgICAgKiBAcGFyYW0geyp9IGIg5a+56LGhXG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKi9cbiAgICBtb2R1bGVzLnByb3RvdHlwZS5tZXJnZUpTT04gPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICB2YXIgdGVtcCA9IHt9O1xuICAgICAgICBpZiAoYSAmJiBiKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpIGluIGIpIHtcbiAgICAgICAgICAgICAgICBhW2ldID0gYltpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRlbXAgPSBhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0ZW1wO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIOa3seaLt+i0neaVsOe7hOaIluWvueixoVxuICAgICAqIEBwYXJhbSB7KG9iamVjdCB8IEFycmF5IDwgYW55ID4pfSBvIOaVsOe7hOaIluWvueixoVxuICAgICAqIEByZXR1cm5zIHsob2JqZWN0IHwgQXJyYXkgPCBhbnkgPil9XG4gICAgICovXG4gICAgbW9kdWxlcy5wcm90b3R5cGUuZGVlcENvcHkgPSBmdW5jdGlvbiAobykge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvKSk7XG4gICAgfTtcbiAgICByZXR1cm4gbW9kdWxlcztcbn0oKSk7XG5leHBvcnRzLkFycmF5TW9kID0gbW9kdWxlcztcbiJdLCJzb3VyY2VSb290IjoiIn0=